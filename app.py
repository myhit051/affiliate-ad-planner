import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î page config
st.set_page_config(
    page_title="Affiliate Ad Campaign Planner",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á UI
st.markdown("""
<style>
.metric-card {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 1rem;
    border-radius: 10px;
    color: white;
    text-align: center;
    margin: 0.5rem 0;
}
.metric-value {
    font-size: 2rem;
    font-weight: bold;
    margin: 0.5rem 0;
}
.metric-label {
    font-size: 0.9rem;
    opacity: 0.8;
}
.recommendation-box {
    background: #f8f9ff;
    border: 1px solid #e6e8ff;
    border-radius: 10px;
    padding: 1rem;
    margin: 1rem 0;
}
</style>
""", unsafe_allow_html=True)

def main():
    # Header
    st.title("üìà Affiliate Ad Campaign Planner")
    st.markdown("**‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á‡πÅ‡∏≠‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î**")
    st.divider()
    
    # Sidebar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input
    with st.sidebar:
        st.header("üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç")
        target_orders = st.number_input(
            "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå",
            min_value=1,
            value=100,
            help="‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"
        )
        
        bonus_amount = st.number_input(
            "‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö (‡∏ö‡∏≤‡∏ó)",
            min_value=0.0,
            value=5000.0,
            help="‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°"
        )
        
        st.divider()
        
        st.header("üìÅ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•")
        uploaded_file = st.file_uploader(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV",
            type=['csv'],
            help="‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÅ‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤"
        )
    
    # Main content
    if uploaded_file is not None:
        try:
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV
            df = pd.read_csv(uploaded_file)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            with st.expander("üìã ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î", expanded=False):
                st.dataframe(df, use_container_width=True)
                st.info(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            
            # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            df_clean = df[
                (df['Order Count'] > 0) & 
                (df['Ad Cost'] > 0) &
                df['Order Count'].notna() &
                df['Ad Cost'].notna()
            ].copy()
            
            if len(df_clean) == 0:
                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì")
                return
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
            avg_cpc = df_clean['CPC(Link)'].mean()
            avg_cost_per_order = df_clean['Cost Per Order(Shopee)'].mean()
            avg_commission_rate = (df_clean['Total Com'] / df_clean['Ad Cost']).mean()
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£
            estimated_ad_cost = target_orders * avg_cost_per_order
            estimated_commission = estimated_ad_cost * avg_commission_rate
            net_profit = estimated_commission + bonus_amount - estimated_ad_cost
            roi = (net_profit / estimated_ad_cost) * 100
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
            st.header("üí∞ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.markdown("""
                <div class="metric-card" style="background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);">
                    <div class="metric-label">‡∏á‡∏ö‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ</div>
                    <div class="metric-value">‡∏ø{:,.0f}</div>
                </div>
                """.format(estimated_ad_cost), unsafe_allow_html=True)
            
            with col2:
                st.markdown("""
                <div class="metric-card" style="background: linear-gradient(135deg, #10b981 0%, #059669 100%);">
                    <div class="metric-label">‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ</div>
                    <div class="metric-value">‡∏ø{:,.0f}</div>
                </div>
                """.format(estimated_commission), unsafe_allow_html=True)
            
            with col3:
                st.markdown("""
                <div class="metric-card" style="background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);">
                    <div class="metric-label">‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥</div>
                    <div class="metric-value">‡∏ø{:,.0f}</div>
                </div>
                """.format(net_profit), unsafe_allow_html=True)
            
            with col4:
                color = "#10b981" if roi >= 0 else "#ef4444"
                st.markdown("""
                <div class="metric-card" style="background: linear-gradient(135deg, {0} 0%, {0} 100%);">
                    <div class="metric-label">ROI ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå</div>
                    <div class="metric-value">{1:.1f}%</div>
                </div>
                """.format(color, roi), unsafe_allow_html=True)
            
            # ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á ROI ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Sub ID
            st.header("üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # ‡∏Å‡∏£‡∏≤‡∏ü ROI
                fig_roi = px.bar(
                    df_clean.head(10), 
                    x='Sub_id4', 
                    y='ROI (%)',
                    title="ROI ‡∏Ç‡∏≠‡∏á Sub ID (Top 10)",
                    color='ROI (%)',
                    color_continuous_scale='RdYlGn'
                )
                fig_roi.update_layout(
                    xaxis_tickangle=-45,
                    height=400
                )
                st.plotly_chart(fig_roi, use_container_width=True)
            
            with col2:
                # ‡∏Å‡∏£‡∏≤‡∏ü Order Count vs Ad Cost
                fig_scatter = px.scatter(
                    df_clean,
                    x='Ad Cost',
                    y='Order Count',
                    size='Total Com',
                    color='ROI (%)',
                    hover_data=['Sub_id4'],
                    title="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå Cost vs Orders",
                    color_continuous_scale='RdYlGn'
                )
                fig_scatter.update_layout(height=400)
                st.plotly_chart(fig_scatter, use_container_width=True)
            
            # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏á‡∏ö
            st.header("üéØ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏á‡∏ö‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤")
            
            # ‡∏´‡∏≤ Top Performers
            top_performers = df_clean.nlargest(5, 'ROI (%)').copy()
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏á‡∏ö
            weights = [0.35, 0.25, 0.20, 0.12, 0.08]  # ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏á‡∏ö
            
            recommendations = []
            for i, (idx, row) in enumerate(top_performers.iterrows()):
                allocated_budget = estimated_ad_cost * weights[i]
                expected_orders = int(allocated_budget / row['Cost Per Order(Shopee)'])
                
                recommendations.append({
                    'Sub ID': row['Sub_id4'],
                    '‡∏á‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (‡∏ö‡∏≤‡∏ó)': f"‡∏ø{allocated_budget:,.0f}",
                    '‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå': f"{expected_orders:,} ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå",
                    'ROI ‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï (%)': f"{row['ROI (%)']:.1f}%",
                    '‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏á‡∏ö': f"{weights[i]*100:.0f}%"
                })
            
            recommendations_df = pd.DataFrame(recommendations)
            st.dataframe(recommendations_df, use_container_width=True, hide_index=True)
            
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            st.header("üìà ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric(
                    label="CPC ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢",
                    value=f"‡∏ø{avg_cpc:.2f}",
                    help="‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å"
                )
            
            with col2:
                st.metric(
                    label="‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå",
                    value=f"‡∏ø{avg_cost_per_order:.2f}",
                    help="‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ"
                )
            
            with col3:
                st.metric(
                    label="‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°",
                    value=f"{avg_commission_rate*100:.1f}%",
                    help="‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏Ñ‡πà‡∏≤‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤"
                )
            
            # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
            st.header("üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            
            recommendation_text = f"""
            <div class="recommendation-box">
            <h4>üéØ ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô:</h4>
            <ul>
                <li><strong>‡∏á‡∏ö‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ:</strong> ‡∏ø{estimated_ad_cost:,.0f}</li>
                <li><strong>‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå:</strong> ‡∏ø{estimated_commission + bonus_amount:,.0f} (‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏° + ‡πÇ‡∏ö‡∏ô‡∏±‡∏™)</li>
                <li><strong>‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥:</strong> ‡∏ø{net_profit:,.0f}</li>
                <li><strong>ROI:</strong> {roi:.1f}%</li>
            </ul>
            
            <h4>üìä ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏á‡∏ö:</h4>
            <ul>
                <li>‡∏Ñ‡∏ß‡∏£‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏ó‡∏µ‡πà Sub ID ‡∏ó‡∏µ‡πà‡∏°‡∏µ ROI ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ 0%</li>
                <li>‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏á‡∏ö‡πÉ‡∏´‡πâ Sub ID ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô (35% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 1)</li>
                <li>‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏á‡∏ö‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡πÉ‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ï‡πà‡∏≥‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û</li>
            </ul>
            </div>
            """
            
            if roi >= 20:
                recommendation_text += """
                <div style="background: #dcfce7; border: 1px solid #16a34a; border-radius: 8px; padding: 1rem; margin: 1rem 0;">
                    <h4 style="color: #16a34a;">‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏î‡∏µ‡∏°‡∏≤‡∏Å</h4>
                    <p>ROI ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡∏Ñ‡∏ß‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢</p>
                </div>
                """
            elif roi >= 0:
                recommendation_text += """
                <div style="background: #fef3c7; border: 1px solid #d97706; border-radius: 8px; padding: 1rem; margin: 1rem 0;">
                    <h4 style="color: #d97706;">‚ö†Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á</h4>
                    <p>ROI ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å ‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á</p>
                </div>
                """
            else:
                recommendation_text += """
                <div style="background: #fee2e2; border: 1px solid #dc2626; border-radius: 8px; padding: 1rem; margin: 1rem 0;">
                    <h4 style="color: #dc2626;">‚ùå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á</h4>
                    <p>ROI ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏ö ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sub ID ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤</p>
                </div>
                """
            
            st.markdown(recommendation_text, unsafe_allow_html=True)
            
        except Exception as e:
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}")
            st.info("üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå CSV ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: Sub_id4, Ad Cost, Order Count, Total Com, ROI (%), CPC(Link), Cost Per Order(Shopee)")
    
    else:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
        st.info("üìÅ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÅ‡∏≠‡∏î‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢")
        
        with st.expander("üìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö", expanded=True):
            sample_data = {
                'Sub_id4': ['m06Nasa1228', 'm02Rooftop0623', 'm56ErgoSleep0420'],
                'Ad Cost': [67.57, 2000.00, 397.68],
                'Shopee Com': [49.89, 613.08, 207.74],
                'Lazada Com': [0.00, 469.97, 4.63],
                'Total Com': [49.89, 1083.05, 212.37],
                'Profit': [-17.68, -916.95, -185.31],
                'ROI (%)': [-26.17, -45.85, -46.60],
                'Link Click': [56, 1184, 67],
                'Order Count': [4, 82, 7],
                'CPC(Link)': [1.21, 1.69, 5.94],
                'Cost Per Order(Shopee)': [16.89, 24.39, 56.81]
            }
            sample_df = pd.DataFrame(sample_data)
            st.dataframe(sample_df, use_container_width=True)

if __name__ == "__main__":
    main()